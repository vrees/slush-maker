esphome:
  name: slush-maker
  platform: ESP32
  board: esp32dev
  # on_boot:
  #   then:
  #     - stepper.set_target:
  #         id: mixer
  #         target: 100000
          
# Enable logging
logger:

# Enable Home Assistant API
api:
  services:
    - service: update_nextion
      then:
        - lambda: 'id(nextion1)->upload_tft();'

ota:
  password: "3ef173cc4bbf97f2f3a8a6f7ae9245c0"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Slush-Maker Fallback Hotspot"
    password: "FYAYzLPXB0Od"

captive_portal:

globals:
  - id: motor_speed
    type: float
    restore_value: no
    initial_value: '500'

uart:
  id: uart_2
  rx_pin: GPIO16
  tx_pin: GPIO17
  baud_rate: 115200

script:
  - id: switchMotorOnOff
    then:
      - if:
          condition:
            binary_sensor.is_on: buttonMotor            
          then:
            - stepper.set_target:
                id: mixer
                target: 10000
            - stepper.report_position:
                id: mixer
                position: 0
            - stepper.set_speed:
                id: mixer
                speed: !lambda 'return id(motor_speed);'  
          else:
            - stepper.set_target:
                id: mixer
                target: 0
            - stepper.report_position:
                id: mixer
                position: 0


display:
  - platform: nextion
    id: nextion1
    uart_id: uart_2
    tft_url: http://192.168.178.84:8123/local/slush-maker.HMI
    lambda: |-
      it.set_component_text("b0", "ButBut");
      it.set_component_text("t_speed", "19.9");
      it.set_component_value("h_speed", 13);      
      
#      it.set_component_value("n_aluplate", -999);

# on button click update TFF software from Webserver      
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO15
      mode: INPUT_PULLUP
      inverted: True
    name: "SlushButton"
    on_press:
      then:
        - lambda: 'id(nextion1)->upload_tft();'
  - platform: nextion
    id: buttonMotor
    component_name: "buttonMotor"
    page_id: "0"
    component_id: "15"
    name: "Motor Ein/Aus"
    # component_name: page0.r0 # r0 is a global component in the Nextion Editor on page 0
    update_interval: 1s
    on_state:
      then:
        - script.execute: switchMotorOnOff
    
spi:
  miso_pin: GPIO19
  mosi_pin: GPIO23
  clk_pin: GPIO18

sensor:
  - platform: max31865
    name: "coolant water"
    id: coolantWater
    cs_pin: GPIO4
    reference_resistance: 4300 Ω
    rtd_nominal_resistance: 1000 Ω
    mains_filter: 50 Hz
    update_interval: 5s
    rtd_wires: 2
    filters:
    - offset: -0.5
    on_value:
      then:
        - lambda: 'id(nextion1)->set_component_value("n_coolant", x*10.0);'
  - platform: max31865
    name: "aluminium plate"
    id: aluminiumPlate
    cs_pin: GPIO5
    reference_resistance: 4300 Ω
    rtd_nominal_resistance: 1000 Ω
    mains_filter: 50 Hz
    update_interval: 5s
    rtd_wires: 2
    filters:
    - offset: -0.25
    on_value:
      then:
        - lambda: 'id(nextion1)->set_component_value("n_aluplate", x*10.0);'
  - platform: max31865
    name: "Slush Ice"
    id: slushIce
    cs_pin: GPIO26
    reference_resistance: 4300 Ω
    rtd_nominal_resistance: 1000 Ω
    mains_filter: 50 Hz
    update_interval: 5s
    rtd_wires: 2
    filters:
    - offset: 0.2   
    on_value:
      then:
        - lambda: 'id(nextion1)->set_component_value("n_slush", x*10.0);'    
  - platform: max31865
    name: "Reserve"
    id: reserve
    cs_pin: GPIO25
    reference_resistance: 4300 Ω
    rtd_nominal_resistance: 1000 Ω
    mains_filter: 50 Hz
    update_interval: 5s
    rtd_wires: 2
    filters:
    - offset: 0.3    
    on_value:
      then:
        - lambda: 'id(nextion1)->set_component_value("n_reserve", x*10.0);'    
        - script.execute: switchMotorOnOff
  - platform: nextion
    name: "Motor Speed Slider"
    id: motorSpeedSlid
    component_name: motorSpeedSlid # pageX.humidity for a global
    update_interval: 2s
    on_value:
      then:
        - lambda: |-
            id(motor_speed) = x * 50;
            id(nextion1)->set_component_text("motorSpeedText", "xx");
            ESP_LOGD("custom", "motor_speed is: %4.0f. Slider is %3.0f", id(motor_speed), x);
        - script.execute: switchMotorOnOff


# id(motor_speed) = motorSpeedSlider.val/100 * 2000;

stepper:
  - platform: a4988
    id: mixer
    step_pin: GPIO33
    dir_pin: GPIO32
    max_speed: 1000 steps/s
    # acceleration: 1000 steps/s^2

# id=15, buttonMotor 
# id=5, motorSpeedText
# id=3, motorSpeedSlid
# motorSpeedText.txt="60"
# motorSpeedSlid.val

